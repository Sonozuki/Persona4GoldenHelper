@page "/shadows"
@inject HttpClient Http;
@using FilterableKeyValuePair = Persona4GoldenHelper.Models.FilterableKeyValuePair<string, List<Persona4GoldenHelper.Models.Shadow>>;

<div class="content-normal">
    <SearchBox @ref="SearchBox" />

    <h1>Shadows</h1>
    @if (SearchBox != null && AllShadows != null)
    {
        <FilterableTable TContent=FilterableKeyValuePair Content=GetDistinctShadows() SearchBox=SearchBox IncludeTBodyTag=false>
            <HeaderRow>
                <th>Name</th>
                <th class="text-align-centre">Type</th>
                <th class="column-very-slim text-align-centre">Level</th>
                <th class="column-very-slim text-align-centre">St</th>
                <th class="column-very-slim text-align-centre">Mg</th>
                <th class="column-very-slim text-align-centre">En</th>
                <th class="column-very-slim text-align-centre">Ag</th>
                <th class="column-very-slim text-align-centre">Lu</th>
                <th class="column-very-slim text-align-centre"><img src="images/physical.png" alt="Physical" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/fire.png" alt="Fire" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/ice.png" alt="Ice" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/electricity.png" alt="Electricity" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/wind.png" alt="Wind" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/light.png" alt="Light" /></th>
                <th class="column-very-slim text-align-centre"><img src="images/darkness.png" alt="Darkness" /></th>
	    	</HeaderRow>
            <ContentRow>
                @{
                    var shadowName = context.Key;
                    var shadows = context.Value;
                }
                
                <tbody class="alternate-colour">
                    @for (int i = 0; i < shadows.Count; i++)
                    {
                        var shadow = shadows[i];

                        <tr>
                            @if (i == 0)
                            {
                                <td rowspan=@shadows.Count><a href="/shadows/@shadow.Name">@shadow.Name</a></td>
                            }

                            <td class="text-align-centre shadow-type-@shadow.Type">@shadow.Type.GetDisplayName()</td>
                            <td class="text-secondary text-align-centre">@shadow.Level</td>
                            <td class="text-secondary text-align-centre">@shadow.Stats.Strength</td>
                            <td class="text-secondary text-align-centre">@shadow.Stats.Magic</td>
                            <td class="text-secondary text-align-centre">@shadow.Stats.Endurance</td>
                            <td class="text-secondary text-align-centre">@shadow.Stats.Agility</td>
                            <td class="text-secondary text-align-centre">@shadow.Stats.Luck</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Physical">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Physical)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Fire">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Fire)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Ice">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Ice)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Electricity">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Electricity)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Wind">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Wind)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Light">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Light)</td>
                            <td class="text-secondary text-align-centre font-bold affinity-@shadow.ElementAffinities.Darkness">@Utilities.ConvertElementAffinityToShortHand(shadow.ElementAffinities.Darkness)</td>
                        </tr>
                    }
                </tbody>
	    	</ContentRow>
        </FilterableTable>
    }
</div>

@code {
    /*********
    ** Fields
    *********/
    /// <summary>A reference to the search box.</summary>
    private SearchBox _SearchBox;

    /// <summary>All the shadows to display.</summary>
    private List<Models.Shadow> AllShadows;


    /*********
    ** Accessors
    *********/
    /// <summary>A reference to the search box.</summary>
    public SearchBox SearchBox
    {
        get => _SearchBox;
        set
        {
            _SearchBox = value;
            StateHasChanged();
        }
    }


    /*********
    ** Protected Methods
    *********/
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync() => AllShadows = await Http.GetFromJsonAsync<List<Models.Shadow>>("data/shadows.json");


    /*********
    ** Private Methods
    *********/
    /// <summary>Retrieves the distinct shadow names.</summary>
    /// <returns>The distinct shadow names.</returns>
    /// <remarks>This is used to separate each shadow as some shadows have multiple types.</remarks>
    private List<FilterableKeyValuePair> GetDistinctShadows() =>
        AllShadows
            .GroupBy(shadow => shadow.Name)
            .Select(shadowGroup => new FilterableKeyValuePair(shadowGroup.Key, shadowGroup.ToList()))
            .ToList();
}
