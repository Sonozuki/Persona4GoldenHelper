@page "/weapons"
@inject HttpClient Http;

<div class="content-normal">
    <SearchBox @ref="SearchBox" />

    <h1>Weapons</h1>
    @if (SearchBox != null && AllWeapons != null)
    {
        @foreach (var user in Enum.GetValues<User>())
        {
            <FilterableTable Header=@user.ToString() TContent=Weapon Content=GetWeaponsByUser(user) SearchBox=SearchBox IncludeTBodyTag=false ShowNoResultsText=false TableReferences=TableReferences>
                <HeaderRow>
                    <th>Name</th>
                    <th class="column-very-slim text-align-centre">Attack</th>
                    <th class="column-very-slim text-align-centre">Accuracy</th>
                    <th>Effect</th>
                    <th class="text-align-centre">Price</th>
                    <th>How to Obtain</th>
	        	</HeaderRow>
                <ContentRow>
                    <tbody class="alternate-colour">
                        @for (int i = 0; i < context.Obtained.Count; i++)
                        {
                            var obtain = context.Obtained[i];
                            <tr>
                                @if (i == 0)
                                {
                                    <td rowspan=@context.Obtained.Count>@context.Name</td>
                                    <td rowspan=@context.Obtained.Count class="text-align-centre">@context.Attack</td>
                                    <td rowspan=@context.Obtained.Count class="text-align-centre">@context.Accuracy</td>
                                    <td rowspan=@context.Obtained.Count>@(context.Effect == "" ? "-" : context.Effect)</td>
                                }

                                <td class="text-secondary text-align-centre">@(obtain.Price == "" ? "-" : obtain.Price)</td>
                                <td>@obtain.Obtain</td>
                            </tr>
                        }
                    </tbody>
	    		</ContentRow>
	        </FilterableTable>
        }
    }
    @if (TableReferences.Count > 0 && !TableReferences.AnyHasResults)
    {
        <NoResults/>
    }
</div>

@code {
    /*********
    ** Fields
    *********/
    /// <summary>A reference to the search box.</summary>
    private SearchBox _SearchBox;
    
    /// <summary>All the weapons to display.</summary>
    private List<Weapon> AllWeapons;
    
    /// <summary>References to all the tables.</summary>
    private TableReferences<Weapon> TableReferences = new();


    /*********
    ** Accessors
    *********/
    /// <summary>A reference to the search box.</summary>
    public SearchBox SearchBox
    {
        get => _SearchBox;
        set
        {
            _SearchBox = value;
            StateHasChanged();
        }
    }


    /*********
    ** Protected Methods
    *********/
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        AllWeapons = await Http.GetFromJsonAsync<List<Weapon>>("data/weapons.json");
        TableReferences.StateChanged += StateHasChanged;
    }

    
    /*********
    ** Private Methods
    *********/
    /// <summary>Retrieves the weapons for a specific user.</summary>
    /// <param name="user">The user whose weapons should be retrieved.</param>
    /// <returns>The weapons for <paramref name="user"/>.</returns>
    private List<Weapon> GetWeaponsByUser(User user) =>
        AllWeapons
            .Where(weapon => weapon.User == user)
            .ToList();
}