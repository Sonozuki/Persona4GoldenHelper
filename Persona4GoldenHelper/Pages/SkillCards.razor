@page "/skillcards"
@inject HttpClient Http;
@using FilterableKeyValuePair = Persona4GoldenHelper.Models.FilterableKeyValuePair<int, List<Persona4GoldenHelper.Models.SkillCard>>;

<div class="content-narrow">
    <SearchBox @ref="SearchBox" />

    <h1>Skill Cards</h1>
    @if (SearchBox != null && AllSkillCards != null)
    {
        <h2 class="text-align-centre">How to Obtain</h2>
        <p class="text-align-centre">Skill cards are obtained via Shuffle Time. Shuffle time can occur at the end of a battle. If you get all the cards in the Shuffle Time you get a Sweep Bonus, a Sweep Bonus means you are guarenteed to get a Shuffle Time after the next battle. Each dungeon has a chance of dropping different skill card, by rank. This can be found below.</p>
        <FilterableTable TContent=SkillCardLocation Content=AllSkillCardLocations SearchBox=SearchBox>
            <HeaderRow>
                <th class="text-align-centre column-slim">Dungeon</th>
                <th class="text-align-centre column-slim">Skill Card Ranks Found</th>
	    	</HeaderRow>
            <ContentRow>
                <tr class="alternate-colour">
                    <td class="text-align-centre">@context.DungeonName</td>
                    <td class="text-align-centre">Ranks @context.RankLowerBound-@context.RankUpperBound</td>
                </tr>
	    	</ContentRow>
	    </FilterableTable>

        @foreach (var type in Enum.GetValues<SkillCardType>())
        {
            <FilterableTable Header=@type.ToString() TContent=FilterableKeyValuePair Content=GetSkillCardsByType(type) SearchBox=SearchBox>
                <HeaderRow>
                    <th class="text-align-centre column-very-slim">Rank</th>
                    <th>Skill Cards</th>
	        	</HeaderRow>
                <ContentRow>
                    @{
                        var rank = context.Key;
                        var rankSkillCards = context.Value;
                    }

                    <tr class="alternate-colour">
                        <td class="text-secondary text-align-centre">@rank</td>
                        <td>
                            @if (rankSkillCards.Count == 0)
                            {
                                @:-
                            }
        
                            @for (int j = 0; j < rankSkillCards.Count; j++)
                            {
                                <span>@rankSkillCards[j].Name</span>@(j != rankSkillCards.Count() - 1 ? ", " : "")
                            }
                        </td>
                    </tr>
	        	</ContentRow>
	        </FilterableTable>
        }
    }
</div>

@code {
    /*********
    ** Fields
    *********/
    /// <summary>A reference to the search box.</summary>
    private SearchBox _SearchBox;

    /// <summary>All the skill card locations to display.</summary>
    private List<SkillCardLocation> AllSkillCardLocations;

    /// <summary>All the skill cards to display.</summary>
    private List<SkillCard> AllSkillCards;


    /*********
    ** Accessors
    *********/
    /// <summary>A reference to the search box.</summary>
    public SearchBox SearchBox
    {
        get => _SearchBox;
        set
        {
            _SearchBox = value;
            StateHasChanged();
        }
    }


    /*********
    ** Protected Methods
    *********/
    /// <inheritdoc/>
    protected override async Task OnInitializedAsync()
    {
        AllSkillCardLocations = await Http.GetFromJsonAsync<List<SkillCardLocation>>("data/skill-card-locations.json");
        AllSkillCards = await Http.GetFromJsonAsync<List<SkillCard>>("data/skill-cards.json");
    }


    /*********
    ** Private Methods
    *********/
    /// <summary>Retrieves the skill cards of a specific type.</summary>
    /// <param name="type">The type of skill cards to retrieve.</param>
    /// <returns>The skill cards with a type of <paramref name="type"/></returns>
    private List<FilterableKeyValuePair<int, List<SkillCard>>> GetSkillCardsByType(SkillCardType type) =>
        AllSkillCards
            .Where(skillCard => skillCard.Type == type)
            .GroupBy(skillCard => skillCard.Rank)
            .Select(skillCardGroup => new FilterableKeyValuePair(skillCardGroup.Key, skillCardGroup.ToList()))
            .ToList();
}
